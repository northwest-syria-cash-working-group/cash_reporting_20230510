distribution_date = anydate(distribution_date)) %>%
ggplot(aes(x = distribution_date, y = cum_ben)) +
geom_line(colour = "blue") +
geom_text(aes(label = scales::comma(cum_label)), vjust = -1,
size = 4) +
scale_x_date(date_breaks = "1 week", date_labels = "%d-%b") +
# Why didn't you learn this before?
scale_y_continuous(labels = comma, expand = expansion(mult = .1)) +
labs(x = "Distribution date",
y = "Cumulative beneficiaries",
title = "MPC progress by date",
subtitle = paste0("The earliest earthquake-related distribution was 2023-02-09\nExcludes ",
sum_stats %>% pull(beneficiaries) - max(cum_label),
" beneficiaries for which the date was not reported or was unreadable"))
cbr %>%
filter(!is.na(distribution_date)) %>%
mutate(distribution_date = anydate(distribution_date)) %>%
filter(project_status == "Completed" &
str_detect(cluster, "Multipurpose") &
previously_assisted == "No") %>%
group_by(distribution_date) %>%
summarise(beneficiaries = sum(beneficiaries)) %>%
arrange(distribution_date) %>%
filter(distribution_date  > "2022-12-30" & distribution_date < "2023-05-16") %>%
mutate(cum_ben = cumsum(beneficiaries)) %>%
mutate(cum_label = ifelse(distribution_date == "2023-02-10" |
distribution_date == "2023-03-01" |
distribution_date == "2023-03-15" |
distribution_date == "2023-03-30"|
distribution_date == "2023-04-15"|
distribution_date == "2023-05-10",
cum_ben, ""),
cum_label = as.numeric(cum_label),
distribution_date = anydate(distribution_date)) %>%
ggplot(aes(x = distribution_date, y = cum_ben)) +
geom_line(colour = "blue") +
geom_text(aes(label = scales::comma(cum_label)), vjust = -1,
size = 4) +
scale_x_date(date_breaks = "1 week", date_labels = "%d-%b") +
# Why didn't you learn this before?
scale_y_continuous(labels = comma, expand = expansion(mult = .1)) +
labs(x = "Distribution date",
y = "Cumulative beneficiaries",
title = "MPC progress by date",
subtitle = paste0("The earliest earthquake-related distribution was 2023-02-09\nExcludes ",
sum_stats %>% pull(beneficiaries) - max(.$cum_label),
" beneficiaries for which the date was not reported or was unreadable"))
progress_line <- cbr %>%
filter(!is.na(distribution_date)) %>%
mutate(distribution_date = anydate(distribution_date)) %>%
filter(project_status == "Completed" &
str_detect(cluster, "Multipurpose") &
previously_assisted == "No") %>%
group_by(distribution_date) %>%
summarise(beneficiaries = sum(beneficiaries)) %>%
arrange(distribution_date) %>%
filter(distribution_date  > "2022-12-30" & distribution_date < "2023-05-16") %>%
mutate(cum_ben = cumsum(beneficiaries)) %>%
mutate(cum_label = ifelse(distribution_date == "2023-02-10" |
distribution_date == "2023-03-01" |
distribution_date == "2023-03-15" |
distribution_date == "2023-03-30"|
distribution_date == "2023-04-15"|
distribution_date == "2023-05-10",
cum_ben, ""),
cum_label = as.numeric(cum_label),
distribution_date = anydate(distribution_date))
progress_line %>%
ggplot(aes(x = distribution_date, y = cum_ben)) +
geom_line(colour = "blue") +
geom_text(aes(label = scales::comma(cum_label)), vjust = -1,
size = 4) +
scale_x_date(date_breaks = "1 week", date_labels = "%d-%b") +
# Why didn't you learn this before?
scale_y_continuous(labels = comma, expand = expansion(mult = .1)) +
labs(x = "Distribution date",
y = "Cumulative beneficiaries",
title = "MPC progress by date",
subtitle = paste0("The earliest earthquake-related distribution was 2023-02-09\nExcludes ",
sum_stats %>% pull(beneficiaries) - max(progress_line$cum_label),
" beneficiaries for which the date was not reported or was unreadable"))
progress_line %>%
ggplot(aes(x = distribution_date, y = cum_ben)) +
geom_line(colour = "blue") +
geom_text(aes(label = scales::comma(cum_label)), vjust = -1,
size = 4) +
scale_x_date(date_breaks = "1 week", date_labels = "%d-%b") +
# Why didn't you learn this before?
scale_y_continuous(labels = comma, expand = expansion(mult = .1)) +
labs(x = "Distribution date",
y = "Cumulative beneficiaries",
title = "MPC progress by date",
subtitle = paste0("The earliest earthquake-related distribution was 2023-02-09\nExcludes ",
sum_stats %>% pull(beneficiaries) -
max(progress_line$cum_label, na.rm = TRUE),
" beneficiaries for which the date was not reported or was unreadable"))
progress_line %>%
ggplot(aes(x = distribution_date, y = cum_ben)) +
geom_line(colour = "blue") +
geom_text(aes(label = scales::comma(cum_label)), vjust = -1,
size = 4) +
scale_x_date(date_breaks = "1 week", date_labels = "%d-%b") +
# Why didn't you learn this before?
scale_y_continuous(labels = comma, expand = expansion(mult = .1)) +
labs(x = "Distribution date",
y = "Cumulative beneficiaries",
title = "MPC progress by date",
subtitle = paste0("The earliest earthquake-related distribution was 2023-02-09\nExcludes ",
format(sum_stats %>% pull(beneficiaries) -
max(progress_line$cum_label, na.rm = TRUE), big.mark = ","),
" beneficiaries for which the date was not reported or was unreadable"))
cbr %>%
filter(project_status == "Planned" & str_detect(cluster, "Multipurpose")) %>%
mutate(month = month(distribution_date, label = TRUE),
month = as.character(month)) %>%
# mutate(month = ifelse(month %in% c("Feb", "Mar", "Apr") | is.na(month), "NA", month)) %>%
group_by(month) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE))
cbr %>%
filter(project_status == "Planned" & str_detect(cluster, "Multipurpose")) %>%
mutate(month = month(distribution_date, label = TRUE),
month = as.character(month)) %>%
group_by(month) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE)) %>%
mutate(month = factor(month, c("Apr", "May", "Jun", "Jul", "Aug", "Sep",
"Oct", "Nov", "Dec"))) %>%
arrange(month) %>%
flextable() %>%
theme_zebra() %>%
set_caption("Planned beneficiaries by month") %>%
footnote(i = 1, j = 1, inline = TRUE, ref_symbols = "1", part = "header",
value = as_paragraph("Some dates are missing or improperly encoded")) %>%
set_table_properties(layout = "autofit", width = .5)
cbr %>%
filter(project_status == "Planned" & str_detect(cluster, "Multipurpose")) %>%
mutate(month = month(distribution_date, label = TRUE),
month = as.character(month)) %>%
group_by(month) %>%
summarise(beneficiaries = sum(beneficiaries, na.rm = TRUE)) %>%
mutate(month = ifelse(is.na(month), "NA", month),
month = factor(month, c("Apr", "May", "Jun", "Jul", "Aug", "Sep",
"Oct", "Nov", "Dec", "NA"))) %>%
arrange(month) %>%
flextable() %>%
theme_zebra() %>%
set_caption("Planned beneficiaries by month") %>%
footnote(i = 1, j = 1, inline = TRUE, ref_symbols = "1", part = "header",
value = as_paragraph("Some dates are missing or improperly encoded")) %>%
set_table_properties(layout = "autofit", width = .5)
cbr %>%
filter(project_status == "Completed" &
str_detect(cluster, "Multipurpose")) %>%
group_by(implementing_partner) %>%
summarise(beneficiaries = sum(beneficiaries[previously_assisted == "No"], na.rm = TRUE),
districts = n_distinct(admin2pcode),
communities = n_distinct(admin4pcode)) %>%
arrange(desc(beneficiaries)) %>%
flextable() %>%
set_caption("Reach and footprint of cash response actors") %>%
theme_zebra() %>%
set_table_properties(layout = "autofit", width = .8) %>%
footnote(as_paragraph("Only partners who provided more than USD 100/family/month"),
i = 1, j = 1, part = "header", inline = TRUE, ref_symbols = "1")
cbr %>%
filter(project_status == "Completed" &
str_detect(cluster, "Multipurpose")) %>%
group_by(implementing_partner) %>%
summarise(total_usd = sum(total_usd, na.rm = TRUE),
families = sum(families, na.rm = TRUE)) %>%
mutate(usd_per_fam = round(total_usd / families, digits = 2),
`%_usd_total` = round(total_usd / sum(total_usd) * 100,
digits = 2),
total_usd = round(total_usd)) %>%
arrange(desc(total_usd)) %>%
flextable() %>%
set_caption("USD disbursed and families reached by partner") %>%
theme_zebra() %>%
flextable::set_table_properties(layout = "autofit", width = .8)
cbr %>%
filter(project_status == "Completed" &
str_detect(cluster, "Multipurpose")) %>%
group_by(implementing_partner) %>%
summarise(beneficiary_freq = sum(beneficiaries, na.rm = TRUE),
districts = n_distinct(admin2pcode),
communities = n_distinct(admin4pcode)) %>%
arrange(desc(beneficiaries)) %>%
flextable() %>%
set_caption("Reach and footprint of cash response actors") %>%
theme_zebra() %>%
set_table_properties(layout = "autofit", width = .8) %>%
footnote(as_paragraph("Only partners who provided more than USD 100/family/month"),
i = 1, j = 1, part = "header", inline = TRUE, ref_symbols = "1")
cbr %>%
filter(project_status == "Completed" &
str_detect(cluster, "Multipurpose")) %>%
group_by(implementing_partner) %>%
summarise(beneficiary_freq = sum(beneficiaries, na.rm = TRUE),
districts = n_distinct(admin2pcode),
communities = n_distinct(admin4pcode)) %>%
arrange(desc(beneficiary_freq)) %>%
flextable() %>%
set_caption("Reach and footprint of cash response actors") %>%
theme_zebra() %>%
set_table_properties(layout = "autofit", width = .8) %>%
footnote(as_paragraph("Only partners who provided more than USD 100/family/month"),
i = 1, j = 1, part = "header", inline = TRUE, ref_symbols = "1")
cbr %>%
group_by(month = month(distribution_date)) %>%
summarise(partners = n_distinct(implementing_partner))
month_reporting <- cbr %>%
group_by(month = month(distribution_date)) %>%
summarise(partners = n_distinct(implementing_partner))
filter(month_reporting, month == 2) %>% pull(partners)
format(sum_stats %>% pull(beneficiaries) - max(progress_line$cum_label, na.rm = TRUE), big.mark = ",")
cbr %>% count(activity)
cbr %>% count(cluster)
cbr %>% filter(cluster == "Multipurpose - Repeated") %>% {sum(.$beneficiaries)}
cbr %>% filter(str_detect(cluster, "Multipurpose")) %>% {sum(.$beneficiaries)}
68507 / 686416
cbr %>% filter(cluster == "Multipurpose - Repeated" &
previously_assisted == "No") %>% {sum(.$beneficiaries)}
cbr %>% filter(str_detect(cluster, "Multipurpose") &
previously_assisted == "No") %>% {sum(.$beneficiaries)}
cbr %>% filter(str_detect(cluster, "Multipurpose") &
previously_assisted == "No") %>% {sum(.$beneficiaries)}
cbr %>% filter(cluster == "Multipurpose - Repeated" &
previously_assisted == "No") %>% {sum(.$beneficiaries)}
cbr %>% filter(str_detect(cluster, "Multipurpose") & project_status == "Completed" &
previously_assisted == "No") %>% {sum(.$beneficiaries, na.rm = TRUE)}
cbr %>% filter(cluster == "Multipurpose - Repeated" & project_status == "Completed" &
previously_assisted == "No") %>% {sum(.$beneficiaries, na.rm = TRUE)}
cbr %>% filter(str_detect(cluster, "Multipurpose") & project_status == "Completed" &
previously_assisted == "No") %>% {sum(.$beneficiaries, na.rm = TRUE)}
cbr %>% filter(cluster == "Multipurpose - Repeated" & project_status == "Completed" &
previously_assisted == "No") %>% {sum(.$beneficiaries, na.rm = TRUE)}
cbr %>% filter(str_detect(cluster, "Multipurpose") & project_status == "Completed" &
previously_assisted == "No") %>% {sum(.$beneficiaries, na.rm = TRUE)}
25496 / 535945
cbr %>% filter(cluster == "Multipurpose - Repeated" & project_status == "Completed" &
previously_assisted == "No" & response_type == "HRP") %>% {sum(.$beneficiaries, na.rm = TRUE)}
cbr %>% filter(cluster == "Multipurpose - Repeated" & project_status == "Completed" &
previously_assisted == "No" & response_type == "HRP") %>%
group_by(month = month(distribution_date)) %>%
summarise(beneficiaries = sum(beneficiaries))
knitr::opts_chunk$set(echo = FALSE, fig.width=9, message = FALSE, warning=FALSE)
library(tidyverse)
library(readxl)
library(lubridate)
library(stringi)
library(janitor)
library(scales)
library(viridis)
library(patchwork)
library(DT)
library(here)
library(sf)
library(plotly)
library(flextable)
library(mdepriv)
library(ggrepel)
library(anytime)
library(tidytext)
theme_set(theme_light())
# disabling scientific notation
options(scipen = 100)
`%out%` <- Negate(`%in%`)
# function for transposing df
transpose_df <- function(df) {
t_df <- data.table::transpose(df)
colnames(t_df) <- rownames(df)
rownames(t_df) <- colnames(df)
t_df <- t_df %>%
tibble::rownames_to_column(.data = .) %>%
tibble::as_tibble(.)
return(t_df)
}
# scaling functions
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}
# mode function
mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
locations <- read_csv("./data/locations_aoc.csv")
pcode3_shape <-
st_read("./data/syr_admbnda_uncs_unocha_20201217/syr_admbnda_adm3_uncs_unocha_20201217.shp")
report_date <- "10 May 2023"
names_eq <- c(
"date",
"governorate",
"district",
"sub_district",
"community",
"admin4pcode",
"casualties",
"injuries",
"completely_destroyed_houses",
"damaged_unihabitable_houses",
"temporary_accommodation_centres",
"idps_in_all_centres",
"schools_as_accomodation_centres",
"idps_in_schools",
"tents_needed",
"blankets_mattresses_needed",
"temporary_accommodation_centres_available",
"accessible_civil_defense",
"latrines_available",
"meals_needed_per_day",
"need_blood_donations",
"health_services_available",
"necessary_medical_equipment",
"rubble_volunteers",
"telecoms_available",
"electricity_available",
"heating_fuel_needed"
)
eq <- read_excel("./data/syria-earthquake-impact-20-march-2023.xlsx",
sheet = "DATASET") %>%
setNames(names_eq) %>%
left_join(locations %>% select(admin4pcode, admin3pcode),
by = c("admin4pcode" = "admin4pcode")) %>%
mutate(wounded_dead = casualties + injuries,
damaged_houses = completely_destroyed_houses + damaged_unihabitable_houses) %>%
group_by(admin3pcode) %>%
summarise(wounded_dead = sum(wounded_dead, na.rm = TRUE),
damaged_houses = sum(damaged_houses, na.rm = TRUE)) %>%
left_join(read_excel("./data/2023HNO_PiN_Severity_detailedAoI_FORSHARE 15032023.xlsx", skip = 1,
sheet = 1) %>%
clean_names() %>%
select(admin3pcode, total_population, aoc = ao_c),
by = "admin3pcode") %>%
mutate(wounded_dead_100k = wounded_dead / total_population * 100000,
damaged_houses_100k = damaged_houses / total_population * 100000)
eq_mdepriv <- eq %>%
mutate_at(vars(wounded_dead, damaged_houses,
wounded_dead_100k, damaged_houses_100k), ~ range_wna(.)) %>%
mdepriv(c("wounded_dead", "damaged_houses",
"wounded_dead_100k", "damaged_houses_100k"),
method = "cz", output = "all",
score_i_heading = "eq_score")
eq <- eq %>%
left_join(eq_mdepriv$data %>%
select(admin3pcode, eq_score),
by = "admin3pcode")
# Think of another way to do this -- if someone else runs this, it won't work
cbr <- read_csv("./data/cbr_com.csv") %>%
mutate(month = month(distribution_date)) %>%
replace_na(list(beneficiaries = 0)) %>%
mutate(governorate = recode(governorate,
"aleppo" = "Aleppo"),
district = recode(district,
"Jabal Samman" = "Jebel Saman",
"azaz" = "A'zaz",
"jarablus" = "Jarablus"),
sub_district = recode(sub_district,
"azaz" = "A'zaz",
"jarablus" = "Jarablus"),
# Doing this because Ar-Raqqa has never appeared before
previously_assisted = ifelse(admin1pcode %in% c("SY11"),
"No",
previously_assisted))
hno <- read_excel("./data/2023HNO_PiN_Severity_detailedAoI_FORSHARE 15032023.xlsx", skip = 1,
sheet = 1) %>%
clean_names()
nw_pcode3 <- hno %>%
filter(ao_c == "NW") %>%
pull(admin3pcode)
four <- read_csv("./data/4ws.csv")
cbr %>%
filter(str_detect(cluster, "Multipurpose")) %>%
write_csv("./data/export_for_fsl.csv")
cbr %>% count(implementing_partner)
cbr %>% count(implementing_partner, abbreviation)
cbr %>% count(implementing_partner, abbreviation, wt = beneficiaries)
cbr %>% glimpse()
knitr::opts_chunk$set(echo = FALSE, fig.width=9, message = FALSE, warning=FALSE)
library(tidyverse)
library(readxl)
library(lubridate)
library(stringi)
library(janitor)
library(scales)
library(viridis)
library(patchwork)
library(DT)
library(here)
library(sf)
library(plotly)
library(flextable)
library(mdepriv)
library(ggrepel)
library(anytime)
library(tidytext)
theme_set(theme_light())
# disabling scientific notation
options(scipen = 100)
`%out%` <- Negate(`%in%`)
# function for transposing df
transpose_df <- function(df) {
t_df <- data.table::transpose(df)
colnames(t_df) <- rownames(df)
rownames(t_df) <- colnames(df)
t_df <- t_df %>%
tibble::rownames_to_column(.data = .) %>%
tibble::as_tibble(.)
return(t_df)
}
# scaling functions
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}
# mode function
mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
locations <- read_csv("./data/locations_aoc.csv")
pcode3_shape <-
st_read("./data/syr_admbnda_uncs_unocha_20201217/syr_admbnda_adm3_uncs_unocha_20201217.shp")
report_date <- "10 May 2023"
names_eq <- c(
"date",
"governorate",
"district",
"sub_district",
"community",
"admin4pcode",
"casualties",
"injuries",
"completely_destroyed_houses",
"damaged_unihabitable_houses",
"temporary_accommodation_centres",
"idps_in_all_centres",
"schools_as_accomodation_centres",
"idps_in_schools",
"tents_needed",
"blankets_mattresses_needed",
"temporary_accommodation_centres_available",
"accessible_civil_defense",
"latrines_available",
"meals_needed_per_day",
"need_blood_donations",
"health_services_available",
"necessary_medical_equipment",
"rubble_volunteers",
"telecoms_available",
"electricity_available",
"heating_fuel_needed"
)
eq <- read_excel("./data/syria-earthquake-impact-20-march-2023.xlsx",
sheet = "DATASET") %>%
setNames(names_eq) %>%
left_join(locations %>% select(admin4pcode, admin3pcode),
by = c("admin4pcode" = "admin4pcode")) %>%
mutate(wounded_dead = casualties + injuries,
damaged_houses = completely_destroyed_houses + damaged_unihabitable_houses) %>%
group_by(admin3pcode) %>%
summarise(wounded_dead = sum(wounded_dead, na.rm = TRUE),
damaged_houses = sum(damaged_houses, na.rm = TRUE)) %>%
left_join(read_excel("./data/2023HNO_PiN_Severity_detailedAoI_FORSHARE 15032023.xlsx", skip = 1,
sheet = 1) %>%
clean_names() %>%
select(admin3pcode, total_population, aoc = ao_c),
by = "admin3pcode") %>%
mutate(wounded_dead_100k = wounded_dead / total_population * 100000,
damaged_houses_100k = damaged_houses / total_population * 100000)
eq_mdepriv <- eq %>%
mutate_at(vars(wounded_dead, damaged_houses,
wounded_dead_100k, damaged_houses_100k), ~ range_wna(.)) %>%
mdepriv(c("wounded_dead", "damaged_houses",
"wounded_dead_100k", "damaged_houses_100k"),
method = "cz", output = "all",
score_i_heading = "eq_score")
eq <- eq %>%
left_join(eq_mdepriv$data %>%
select(admin3pcode, eq_score),
by = "admin3pcode")
# Think of another way to do this -- if someone else runs this, it won't work
cbr <- read_csv("./data/cbr_com.csv") %>%
mutate(month = month(distribution_date)) %>%
replace_na(list(beneficiaries = 0)) %>%
mutate(governorate = recode(governorate,
"aleppo" = "Aleppo"),
district = recode(district,
"Jabal Samman" = "Jebel Saman",
"azaz" = "A'zaz",
"jarablus" = "Jarablus"),
sub_district = recode(sub_district,
"azaz" = "A'zaz",
"jarablus" = "Jarablus"),
# Doing this because Ar-Raqqa has never appeared before
previously_assisted = ifelse(admin1pcode %in% c("SY11"),
"No",
previously_assisted)) %>%
mutate(distribution_date = end_date)
cbr <- read_csv("./data/cbr_com.csv") %>%
mutate(month = month(distribution_date)) %>%
replace_na(list(beneficiaries = 0)) %>%
mutate(governorate = recode(governorate,
"aleppo" = "Aleppo"),
district = recode(district,
"Jabal Samman" = "Jebel Saman",
"azaz" = "A'zaz",
"jarablus" = "Jarablus"),
sub_district = recode(sub_district,
"azaz" = "A'zaz",
"jarablus" = "Jarablus"),
# Doing this because Ar-Raqqa has never appeared before
previously_assisted = ifelse(admin1pcode %in% c("SY11"),
"No",
previously_assisted))
cbr %>% filter(admin4pcode %in% c("C4234"))
